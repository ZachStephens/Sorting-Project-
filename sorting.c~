#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "sorting.h"
//long *Load_File(char *Filename, int *Size);
int* mypq(int,int*);

long *Load_File(char *Filename, int *Size)
{
  FILE * fp = fopen(Filename,"r");
  long* arr=NULL;
  fscanf(fp,"%d",Size);
  arr = malloc(sizeof(long)* (*Size));
  int i = 0;
  if(fp!=NULL)
    {
      while(i < *Size){      
	fscanf(fp,"%ld",&arr[i++]);
      }	    
      fclose(fp);
      return arr;
    }
  else
    {
      fprintf(stderr,"file did not open correctly");
      return NULL;
    }
}

int* mypq(int N,int * x)
{
  //N is len of array to be sorted
  //x is the len of return array 
  int* arr=malloc(sizeof(int)*10000);//remember to free in sort function
  double p = 0;
  double q = 0;
  int sum = 0;
  int i=0;
  int j=0;
  int k;
  while(pow(2,sum) < N)
    {      
      for(p=sum;p>=0;p--)
	{
	  q=sum-p;
	  arr[i] = (int) ((pow(2,p)) * (pow(3,q)));
	  //printf("%f   sum =%d i=%d  p=%f  q=%f \n",arr[i],sum,i,p,q);
	  i++;
	}
      sum++;      
    }
  i--;   
  for(j=1;j<(i);j++)
    {
      k=j;
      while((k>0) & (arr[k-1] > arr[k]))
	{ 
	  p=arr[k-1];
	  arr[k-1]=arr[k];
	  arr[k]=p;
	  k--;
	} 
    }

  while(arr[i]>N)
    {    
      i--;
    }
  i++;
  *x=i;  

  return arr;
    
}


int Save_File(char *Filename, long *Array, int Size)
{
  int i=0;  
  int count=0;
  char buffer[20];
  FILE* ptr;
  ptr = fopen(Filename,"w");
 
  if(!ptr)
    return -1;
  if(!sprintf(buffer,"%d",Size))
    return -1;   
  count++;
  for(i=0;i<Size;i++)
    {
      sprintf(buffer,"%ld",Array[i]);
      if(!fputs(buffer,ptr))
	{
	  return count;
	}
      count++;
    }
  fclose(ptr);
  return 0;

}


void Shell_Insertion_Sort (long *Array, int Size, double *x, double *y)
{
  //get strides
  int stdlen;
  int* strides = mypq(Size,&stdlen);// must be freed
  int i = stdlen-1;//
  int base,max,left,right,tmp;
  int j=0;
  //printf(" Size = %d,    i= %d \n", Size, i);
  while(j<Size)
    {
      //printf("Array[%d] = %ld\n",j, Array[j]);
      j++;
    }
  long int NComp = 0;
  long int NMove = 0;
  while(i>-1)//i will access array of strides
    {
      NComp++;
      max = (Size)- strides[i];
      for(base = 0;base<=max; base++)
	{
	  NComp++;
	  left = base;
	  right = left + strides[i];
	  tmp = Array[right];
	  while((left >=0) && (Array[left] > tmp))
	    {	      
	      NComp+=2;	   	    
	      Array[right] = Array[left];
	      NMove++;
	      right = left;;
      	      left -= strides[i];	      
 	    }
	  Array[right]=tmp;
	  NComp++;
	  if(left>=0){
	    NComp++;
	  }
	}
      NComp++;
      i--;
    }
  NComp++;
  *x=(double) NComp;
  *y=(double) NMove;
  free(strides);

}



void Improved_Bubble_Sort (long *Array, int Size, double *x, double *y)
{
    //get strides
  int stdlen;
  int i = (Size)/1.3;
  int base,max,left,right,j,k;
  double tmp;
  long int NComp = 0;
  long int NMove = 0;
  while(i)//i will access array of strides
    {
      NComp++;
      max=Size-2*i;
      for(j=max;j>=0;j-=i)
	{
	  NComp++;
	  for(k=0;k<=j;k+=i)
	    {
	      NComp++;
	      if(Array[k]>Array[k+i])
		{     
		  tmp = Array[k];
		  Array[k]=Array[k+i];
		  Array[k+i]=tmp;
		  NMove++;
		}
	      NComp++;
	    }
	  NComp++;
	}
      NComp++;
      i = i/1.3;
    }
  NComp++;
  *x=(double) NComp;
  *y=(double) NMove;
}



int main()
{
  long* Array; 
  int Size, i ;
  double NComp,NMove;
  Array = Load_File("1000.txt",&Size);
  Improved_Bubble_Sort (Array,Size,&NComp,&NMove);
  for(i=0;i<Size;i++){
    printf("Array of [%d] =  %ld\n", i,Array[i]);
  }
  printf("The number of moves is %f.\nThe number of comparisons is %f\n",NMove,NComp);
  free(Array); 
  return 0;
}

